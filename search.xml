<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Simple-GraphQL 简介]]></title>
    <url>%2F2017%2F06%2F15%2Fgraphql%2FSimple-GraphQL%2F</url>
    <content type="text"><![CDATA[概念 GraphQL 由Fackbook 推出的一种查询语言。通过在服务器端建立一套Type System，前端可以把自己的查询需求合并成一条查询语句，一次请求即可获取所需的数据。 Sequelize 是 nodejs的 ORM 框架，支持 PostgreSQL、Mysql、SQLite、MSSQL。 Simple-GraphQL 是什么？Simple-GraphQL 是在一个声明式的nodejs框架，可生成基于关系数据库（PostgreSQL, MySQL, SQLite 和 MSSQL）的 GraphQL 接口，并兼容Relay规范。 Simple-GraphQL 解决了什么问题？统一的对象模型 基于Sequelize构建的是数据库的对象模型 基于GraphQL构建的是 API 的对象模型 两个模型属性之间有大量的重合，如果各自定义，在开发和修改的过程中很容易造成模型间的不一致。 Simple-GraphQL 提供一套定义对象模型的规范。基于该规范的对象模型，可以在运行时生成对应的Sequelize和GraphQL对象模型。 Simple-GraphQL 对象模型中的主要概念 基于统一的对象模型，Simple-GraphQL 在生成GraphQL Schema时，能自动生成对应的关联代码。 内置的GraphQL CRUD 操作Simple-GraphQL 可根据对象模型的定义，通过配置可自动生成以下 GraphQL 接口。 单个对象查询：通过Id或唯一键查询 对象集合查询：通过对象中的属性的精确值或关键字，搜索满足条件的对象集合。该接口满足Relay规范。 创建单个对象：提交对象属性值，创建对象并保存到数据库。 更新单个对象：提交对象Id和要修改的属性值，更新数据库中的对应的记录。 删除单个对象：提交对象Id，删除数据库中对应的记录。 Simple-GraphQL 怎样使用？安装1npm install graphql graphql-relay simple-graphql --save 用法定义模型以下代码定义一个待办事项的模型。 每个代办事项（Todo）包含标题（title）、描述（description）、是否完成（completed）、计划完成时间（dueAt）属性。 通过todos（自动生成的Query）可以通过指定条件搜索特定名字的代表事项，也可以查询所有未完成事项等等。 通过addTodo（自动生成的Mutation）可以添加新的代办事项 通过updateTodo（自动生成的Mutation）可以修改代办事项 通过deleteTodo（自动生成的Mutation）可以删除代办事项 通过completedTodo（自定义的Mutation）可以标记一个代办事项完成 Todo.js 1234567891011121314151617181920212223242526272829303132333435363738394041// @flowimport SG from 'simple-graphql'const TodoType = SG.modelRef('Todo') // Reference to Todo model typeexport default SG.model('Todo').fields(&#123; title: &#123; $type: String, required: true &#125;, description: String, completed: &#123; $type: Boolean, default: false &#125;, dueAt: Date&#125;).mutations(&#123; completedTodo: &#123; description: "标记代办事项完成", inputFields: &#123; todoId: &#123; $type: TodoType, required: true &#125; &#125;, outputFields: &#123; changedTodo: TodoType &#125;, mutateAndGetPayload: async function (&#123;todoId&#125;, context, info, &#123;Todo&#125;) &#123; const todo = await Todo.findOne(&#123;where: &#123;id: todoId&#125;&#125;) if (!todo) &#123; throw new Error("代办事项不存在") &#125; if (!todo.completed) &#123; todo.completed = true await todo.save() &#125; return &#123;changedTodo: todo&#125; &#125; &#125;&#125;) 生成 GraphQL Schema 并启动服务端123456789101112131415161718192021222324252627282930313233343536373839import Sequelize from 'sequelize'import SG from 'simple-graphql'import express from 'express'import graphqlHTTP from 'express-graphql'import Todo from './Todo'// Config the Sequelize database connection.const sequelize = new Sequelize('test1', 'postgres', 'Password', &#123; host: 'localhost', port: 5432, dialect: 'postgres', pool: &#123; max: 5, min: 0, idle: 10000 &#125;&#125;)// Generate the GraphQL Schemaconst schema = GS.build(sequelize, [Todo], &#123;&#125;) // After GS.bulid completed, all sequelize models have defined, and call sequelize.sync will automatic create the schema in database.sequelize.sync(&#123; force: false, // if true, it will drop all existing table and recreate all. logging: console.log&#125;).then(() =&gt; console.log('Init DB Done'), (err) =&gt; console.log('Init DB Fail', err))// Start the GraphQL serverconst app = express()app.use('/graphql', graphqlHTTP(&#123; schema: schema, graphiql: true&#125;))app.listen(4000) [To be continue…]]]></content>
      <tags>
        <tag>GraphQL</tag>
        <tag>Sequelize</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[收藏夹]]></title>
    <url>%2F2017%2F06%2F08%2F%E6%94%B6%E8%97%8F%E5%A4%B9%2F</url>
    <content type="text"><![CDATA[网站掘金 设计从达标到卓越 —— API 设计之道]]></content>
  </entry>
</search>